object 3 third_obj
    its-me third_obj
    an-int 2
    a-string "Hello World!\n"
    a-map {
        "another":    5
        third_obj:       "Test"
        $fruit:     $apple
    }
    a-list [
        4 5 8
    ]
    test-func function (arg1 arg2 : local1 local2 local3) {
    }
    other-func function 9 (an-arg : a-local) {
    }
    final-value 66
;

value an-int 7384;
value a-property $test-func;
value my-name "A Name";
value silly-object object 6 silly-object-name;;
value silly-function function silly-function-name () {};
value list-of-lists [
    ["strength" 10]
    ["dexterity" 20]
];
value map-of-maps {
    {4: 5}: {8: 3}
    {1: 9}: {4: 2}
};


function test-call() {
    asm

    "\n## Testing function calls\n" say
    "Passing (4, 5). " say
    5 4 2 test-call-helper call
    "Passing (4). " say
    4 1 test-call-helper call
    "Passing (). " say
    0 test-call-helper call
    "Multiply 5 * 5 = " say
    5 5 2 test-call-helper-multiply call say
    "\n" say
}

function test-call-helper( arg1 arg2 ) {
    asm

    "Received: (" say
    arg1 say
    ", " say
    arg2 say
    ")\n" say
}

function test-call-helper-multiply( arg1 arg2 ) {
    asm arg1 arg2 mult return
}

function test-jumps() {
    asm

    "\n## Testing jump opcodes\n" say
    5 5 jump-eq-good jump-eq
    "jump-eq failed\n" say
    after-jump-eq jump
    jump-eq-good:
    "jump-eq succeeded!\n" say
    after-jump-eq:

    5 10 jump-neq-good jump-neq
    "jump-neq failed\n" say
    after-jump-neq jump
    jump-neq-good:
    "jump-neq succeeded!\n" say
    after-jump-neq:

    5 10 jump-lt-good jump-lt
    "jump-lt failed\n" say
    after-jump-lt jump
    jump-lt-good:
    "jump-lt succeeded!\n" say
    after-jump-lt:

    10 10 jump-lte-good jump-lte
    "jump-lte failed\n" say
    after-jump-lte jump
    jump-lte-good:
    "jump-lte succeeded!\n" say
    after-jump-lte:

    10 5 jump-gt-good jump-gt
    "jump-gt failed\n" say
    after-jump-gt jump
    jump-gt-good:
    "jump-gt succeeded!\n" say
    after-jump-gt:

    10 10 jump-gte-good jump-gte
    "jump-gte failed\n" say
    after-jump-gte jump
    jump-gte-good:
    "jump-gte succeeded!\n" say
    after-jump-gte:
}

function test-math() {
    asm

    "\n## Testing math opcodes\n" say
    "5+5=" say
    5 5 add say
    "\n" say

    "10-5=" say
    10 5 sub say
    "\n" say

    "5*5=" say
    5 5 mult say
    "\n" say

    "40/5=" say
    40 5 div say
    "\n" say
}

function test-object() {
    asm

    "\n## Testing object manipulation opcodes\n" say
    "third_obj.a-string: " say
    $a-string third_obj get-prop say
}

function main(: counter the-value) {
    asm

// show a count up loop and calculate 2^10
    0 counter store
    1 the-value store
    loop-start:
    counter 1 add counter store
    2 the-value mult the-value store
    counter say
    " " say
    counter 10 loop-start jump-lt
    "Loop finished!\n" say
    "Final result: " say
    the-value say
    "\n" say

    0 test-call call
    0 test-jumps call
    0 test-math call
    0 test-object call
}

value te "";
