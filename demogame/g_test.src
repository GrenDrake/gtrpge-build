object 3 third_obj
    its-me third_obj
    an-int 2
    a-string "Hello World!\n"
    a-map {
        "another":    5
        third_obj:       "Test"
        $fruit:     $apple
    }
    a-list [
        4 5 8
    ]
    test-func function (arg1 arg2 : local1 local2 local3) {
    }
    other-func function 9 (an-arg : a-local) {
    }
    final-value 66
;

value an-int 7384;
value a-property $test-func;
value my-name "A Name";
value silly-object object 6 silly-object-name;;
value silly-function function silly-function-name () {};
value list-of-lists [
    ["strength" 10]
    ["dexterity" 20]
];
value map-of-maps {
    {4: 5}: {8: 3}
    {1: 9}: {4: 2}
};


function test-call() {
    asm

    "\n## Testing function calls\n" say
    "Passing (4, 5). " say
    5 4 2 test-call-helper call
    "Passing (4). " say
    4 1 test-call-helper call
    "Passing (). " say
    0 test-call-helper call
    "Multiply 5 * 5 = " say
    5 5 2 test-call-helper-multiply call say
    "\n" say
}

function test-call-helper( arg1 arg2 ) {
    asm

    "Received: (" say
    arg1 say
    ", " say
    arg2 say
    ")\n" say
}

function test-call-helper-multiply( arg1 arg2 ) {
    asm arg1 arg2 mult return
}

function test-compare(: test-value) {
    asm
    "\n## Testing compare opcode\n" say

    " 5 vs 5 (=   0): " say 5 5  cmp say "\n" say
    " 2 vs 5 (=  -3): " say 2 5  cmp say "\n" say
    " 5 vs 2 (=   3): " say 5 2  cmp say "\n" say
    "-5 vs 5 (= -10): " say -5 5 cmp say "\n" say
    "5 vs -5 (=  10): " say 5 -5 cmp say "\n" say

    "\n[setting \"tv\" to 5 to test local variables in compare.]\n" say
    5 test-value store
    " tv vs 5 (=  0): " say test-value 5 cmp say "\n" say
    " 2 vs tv (= -3): " say 2 test-value cmp say "\n" say
    " tv vs 2 (=  3): " say test-value 2 cmp say "\n" say

}

function test-jumps(: test-value) {
    asm
    "\n## Testing jump opcodes\n" say

// jump
    "jmp      : " say
    test001 jmp
    "Failed!\n" say 0 return // abort because the rest of the tests depend on
                             // the jmp opcode
    test001: "Succeeded!\n" say

// jump zero
    "jz    (0): " say
    0 test003 jz
    "Failed!\n" say test003-after jmp
    test003: "Succeeded!\n" say
    test003-after:

    "jz    (1): " say
    1 test004-failed jz
    "Succeeded!\n" say test004-after jmp
    test004-failed: "Failed!\n" say
    test004-after:

//  jump not zero
    "jnz   (0): " say
    0 test005-failed jnz
    "Succeeded!\n" say test005-after jmp
    test005-failed: "Failed!\n" say
    test005-after:

    "jnz   (1): " say
    1 test006 jnz
    "Failed!\n" say test006-after jmp
    test006: "Succeeded!\n" say
    test006-after:

//  jump less than
    "jlt   (1): " say
    1 test007-failed jlt
    "Succeeded!\n" say test007-after jmp
    test007-failed: "Failed!\n" say
    test007-after:

    "jlt   (0): " say
    0 test008-failed jlt
    "Succeeded!\n" say test008-after jmp
    test008-failed: "Failed!\n" say
    test008-after:

    "jlt  (-1): " say
    -1 test009 jlt
    "Failed!\n" say test009-after jmp
    test009: "Succeeded!\n" say
    test009-after:

//  jump less than or equal
    "jlte  (1): " say
    1 test010-failed jlte
    "Succeeded!\n" say test010-after jmp
    test010-failed: "Failed!\n" say
    test010-after:

    "jlte  (0): " say
    0 test011 jlte
    "Failed!\n" say test011-after jmp
    test011: "Succeeded!\n" say
    test011-after:

    "jlte (-1): " say
    -1 test012 jlte
    "Failed!\n" say test012-after jmp
    test012: "Succeeded!\n" say
    test012-after:

//  jump greater than
    "jgt   (1): " say
    1 test013 jgt
    "Failed!\n" say test013-after jmp
    test013: "Succeeded!\n" say
    test013-after:

    "jgt   (0): " say
    0 test014-failed jgt
    "Succeeded!\n" say test014-after jmp
    test014-failed: "Failed!\n" say
    test014-after:

    "jgt  (-1): " say
    -1 test015-failed jgt
    "Succeeded!\n" say test015-after jmp
    test015-failed: "Failed!\n" say
    test015-after:

//  jump greater than or equal
    "jgte  (1): " say
    1 test016 jgte
    "Failed!\n" say test013-after jmp
    test016: "Succeeded!\n" say
    test016-after:

    "jgte  (0): " say
    0 test017 jgte
    "Failed!\n" say test017-after jmp
    test017: "Succeeded!\n" say
    test017-after:

    "jgte (-1): " say
    -1 test018-failed jgte
    "Succeeded!\n" say test018-after jmp
    test018-failed: "Failed!\n" say
    test018-after:


    "\n[Jump target stored in local variable.]\n" say
    "jmp: " say
    test019 test-value store
    test-value jmp
    "Failed!\n" say test019-after jmp
    test019: "Succeeded!\n" say
    test019-after:

    "jz: " say
    test020 test-value store
    0 test-value jz
    "Failed!\n" say test020-after jmp
    test020: "Succeeded!\n" say
    test020-after:

    "jnz: " say
    test021 test-value store
    1 test-value jnz
    "Failed!\n" say test021-after jmp
    test021: "Succeeded!\n" say
    test021-after:

    "jlt: " say
    test022 test-value store
    -1 test-value jlt
    "Failed!\n" say test022-after jmp
    test022: "Succeeded!\n" say
    test022-after:

    "jlte: " say
    test023 test-value store
    -1 test-value jlte
    "Failed!\n" say test023-after jmp
    test023: "Succeeded!\n" say
    test023-after:

    "jgt: " say
    test024 test-value store
    1 test-value jgt
    "Failed!\n" say test024-after jmp
    test024: "Succeeded!\n" say
    test024-after:

    "jgte: " say
    test025 test-value store
    1 test-value jgte
    "Failed!\n" say test025-after jmp
    test025: "Succeeded!\n" say
    test025-after:


    "\n[Test value stored in local variable.]\n" say
    "jz: " say
    0 test-value store
    test-value test026-success jz
    "Failed!\n" say test026-after jmp
    test026-success: "Succeeded!\n" say
    test026-after:

    "jnz: " say
    1 test-value store
    test-value test027-success jnz
    "Failed!\n" say test027-after jmp
    test027-success: "Succeeded!\n" say
    test027-after:

    "jlt: " say
    -1 test-value store
    test-value test028-success jlt
    "Failed!\n" say test028-after jmp
    test028-success: "Succeeded!\n" say
    test028-after:

    "jlte: " say
    -1 test-value store
    test-value test029-success jlte
    "Failed!\n" say test029-after jmp
    test029-success: "Succeeded!\n" say
    test029-after:

    "jgt: " say
    1 test-value store
    test-value test030-success jgt
    "Failed!\n" say test030-after jmp
    test030-success: "Succeeded!\n" say
    test030-after:

    "jgte: " say
    1 test-value store
    test-value test031-success jgte
    "Failed!\n" say test031-after jmp
    test031-success: "Succeeded!\n" say
    test031-after:


    1 return

}

function test-math() {
    asm

    "\n## Testing math opcodes\n" say
    " 5 + 5 = " say
    5 5 add say
    "\n" say

    "10 - 5 = " say
    10 5 sub say
    "\n" say

    " 5 * 5 = " say
    5 5 mult say
    "\n" say

    "40 / 5 = " say
    40 5 div say
    "\n" say
}

function test-object() {
    asm

    "\n## Testing object manipulation opcodes\n" say
    "third_obj.a-string: " say
    $a-string third_obj get-prop say
}

function test-loop-demo(: counter the-value) {
    asm
// show a count up loop and calculate 2^10
    0 counter store
    1 the-value store
    loop-start:
    counter 1 add counter store
    2 the-value mult the-value store
    counter say
    " " say
    counter 10 cmp loop-start jlt
    "Loop finished!\n" say
    "Final result: " say
    the-value say
    "\n" say
}

function main(: key) {
    asm

    start-loop:
    "\n1) Loop Demo\n2) Test Call\n3) Test Compare\n4) Test Jumps\n5) Test Math\n6) Test Getting/Setting Properties.\nz) Quit\n\n> " say
    wait-key key store

    key '1' cmp key-loop-demo jeq
    key '2' cmp key-call jeq
    key '3' cmp key-compare jeq
    key '4' cmp key-jumps jeq
    key '5' cmp key-math jeq
    key '6' cmp key-object jeq
    key 'z' cmp all-done jeq

    key-loop-demo: 0 test-loop-demo call start-loop jmp
    key-call: 0 test-call call start-loop jmp
    key-compare: 0 test-compare call start-loop jmp
    key-jumps: 0 test-jumps call start-loop jmp
    key-math: 0 test-math call start-loop jmp
    key-object: 0 test-object call start-loop jmp
    all-done:
}

value te "";
