// ////////////////////////////////////////////////////////////////////////////
// Common strings
// ////////////////////////////////////////////////////////////////////////////
value continue-str "Continue";


// ////////////////////////////////////////////////////////////////////////////
// Data used for tests
// ////////////////////////////////////////////////////////////////////////////
value test-int 7384;
value test-str "A Name";
value test-list [ 1 2 3 ];
value test-map { 1: "The" 2: "End" 3: "Is" 4: "Far" };
value test-function function test-function-name () {};
value test-object object test-object-name;; // double semicolon currently required
value test-property $test-func;

object first_obj
    an-int 2
    a-string "Hello World!"
    a-property $apple
    an-object object ;
    a-map { $fruit: $apple }
    a-list [ 4 ]
    test-method function(arg1 arg2 arg3) {
        asm
        "I am: " say self say "\n" say
        "My Arguments: " say
        arg1 say ", " say
        arg2 say ", " say
        arg3 say "\n" say
    }
;
object second_obj;


// ////////////////////////////////////////////////////////////////////////////
// Test stack commands
// ////////////////////////////////////////////////////////////////////////////
function test-stack() {
    asm
    2 4 6 8

    "\n## Testing stack manipulation\n" say
    "Items on Stack: " say
    stack-size say
    " (should be 4)\nPopping.\n" say
    pop
    "New items on Stack: " say
    stack-size say
    " (should be 3)\n" say
    pop

    stack-dup
    "Stack-dup: " say say ", " say say " (should be 4, 4)\n" say

    5 6 7 8 2 stack-peek
    "Stack peek: " say say " (should be 6)\n" say

    continue-str show-options add-option
    dispatcher get-option
}


// ////////////////////////////////////////////////////////////////////////////
// Test function calls and arguments
// ////////////////////////////////////////////////////////////////////////////
function test-call() {
    asm

    "\n## Testing function calls\n" say
    "Passing (4, 5). " say
    5 4 2 test-call-helper call
    "Passing (4). " say
    4 1 test-call-helper call
    "Passing (). " say
    0 test-call-helper call
    "Multiply 5 * 5 = " say
    5 5 2 test-call-helper-multiply call say
    "\n" say

    "[b]Calling first_obj.test-method...[/b]\n" say
    3 2 1 3 $test-method first_obj call-method

    continue-str show-options add-option
    dispatcher get-option
}

function test-call-helper( arg1 arg2 ) {
    asm

    "Received: (" say
    arg1 say
    ", " say
    arg2 say
    ")\n" say
}

function test-call-helper-multiply( arg1 arg2 ) {
    asm arg1 arg2 mult return
}


// ////////////////////////////////////////////////////////////////////////////
// Test compare command
// ////////////////////////////////////////////////////////////////////////////
function test-compare(: test-value) {
    asm
    "\n## Testing compare opcode\n" say

    " 5 vs 5 (=   0): " say 5 5  cmp say "\n" say
    " 2 vs 5 (=  -3): " say 2 5  cmp say "\n" say
    " 5 vs 2 (=   3): " say 5 2  cmp say "\n" say
    "-5 vs 5 (= -10): " say -5 5 cmp say "\n" say
    "5 vs -5 (=  10): " say 5 -5 cmp say "\n" say

    "\n[setting \"tv\" to 5 to test local variables in compare.]\n" say
    5 test-value store
    " tv vs 5 (=  0): " say test-value 5 cmp say "\n" say
    " 2 vs tv (= -3): " say 2 test-value cmp say "\n" say
    " tv vs 2 (=  3): " say test-value 2 cmp say "\n" say

    continue-str show-options add-option
    dispatcher get-option
}


// ////////////////////////////////////////////////////////////////////////////
// Test jump commands
// ////////////////////////////////////////////////////////////////////////////
function test-jumps(: test-value) {
    asm
    "\n## Testing jump opcodes\n" say

// jump
    "jmp      : " say
    test001 jmp
    "Failed!\n" say 0 return // abort because the rest of the tests depend on
                             // the jmp opcode
    test001: "Succeeded!\n" say

// jump zero
    "jz    (0): " say
    0 test003 jz
    "Failed!\n" say test003-after jmp
    test003: "Succeeded!\n" say
    test003-after:

    "jz    (1): " say
    1 test004-failed jz
    "Succeeded!\n" say test004-after jmp
    test004-failed: "Failed!\n" say
    test004-after:

//  jump not zero
    "jnz   (0): " say
    0 test005-failed jnz
    "Succeeded!\n" say test005-after jmp
    test005-failed: "Failed!\n" say
    test005-after:

    "jnz   (1): " say
    1 test006 jnz
    "Failed!\n" say test006-after jmp
    test006: "Succeeded!\n" say
    test006-after:

//  jump less than
    "jlt   (1): " say
    1 test007-failed jlt
    "Succeeded!\n" say test007-after jmp
    test007-failed: "Failed!\n" say
    test007-after:

    "jlt   (0): " say
    0 test008-failed jlt
    "Succeeded!\n" say test008-after jmp
    test008-failed: "Failed!\n" say
    test008-after:

    "jlt  (-1): " say
    -1 test009 jlt
    "Failed!\n" say test009-after jmp
    test009: "Succeeded!\n" say
    test009-after:

//  jump less than or equal
    "jlte  (1): " say
    1 test010-failed jlte
    "Succeeded!\n" say test010-after jmp
    test010-failed: "Failed!\n" say
    test010-after:

    "jlte  (0): " say
    0 test011 jlte
    "Failed!\n" say test011-after jmp
    test011: "Succeeded!\n" say
    test011-after:

    "jlte (-1): " say
    -1 test012 jlte
    "Failed!\n" say test012-after jmp
    test012: "Succeeded!\n" say
    test012-after:

//  jump greater than
    "jgt   (1): " say
    1 test013 jgt
    "Failed!\n" say test013-after jmp
    test013: "Succeeded!\n" say
    test013-after:

    "jgt   (0): " say
    0 test014-failed jgt
    "Succeeded!\n" say test014-after jmp
    test014-failed: "Failed!\n" say
    test014-after:

    "jgt  (-1): " say
    -1 test015-failed jgt
    "Succeeded!\n" say test015-after jmp
    test015-failed: "Failed!\n" say
    test015-after:

//  jump greater than or equal
    "jgte  (1): " say
    1 test016 jgte
    "Failed!\n" say test013-after jmp
    test016: "Succeeded!\n" say
    test016-after:

    "jgte  (0): " say
    0 test017 jgte
    "Failed!\n" say test017-after jmp
    test017: "Succeeded!\n" say
    test017-after:

    "jgte (-1): " say
    -1 test018-failed jgte
    "Succeeded!\n" say test018-after jmp
    test018-failed: "Failed!\n" say
    test018-after:


    "\n[Jump target stored in local variable.]\n" say
    "jmp: " say
    test019 test-value store
    test-value jmp
    "Failed!\n" say test019-after jmp
    test019: "Succeeded!\n" say
    test019-after:

    "jz: " say
    test020 test-value store
    0 test-value jz
    "Failed!\n" say test020-after jmp
    test020: "Succeeded!\n" say
    test020-after:

    "jnz: " say
    test021 test-value store
    1 test-value jnz
    "Failed!\n" say test021-after jmp
    test021: "Succeeded!\n" say
    test021-after:

    "jlt: " say
    test022 test-value store
    -1 test-value jlt
    "Failed!\n" say test022-after jmp
    test022: "Succeeded!\n" say
    test022-after:

    "jlte: " say
    test023 test-value store
    -1 test-value jlte
    "Failed!\n" say test023-after jmp
    test023: "Succeeded!\n" say
    test023-after:

    "jgt: " say
    test024 test-value store
    1 test-value jgt
    "Failed!\n" say test024-after jmp
    test024: "Succeeded!\n" say
    test024-after:

    "jgte: " say
    test025 test-value store
    1 test-value jgte
    "Failed!\n" say test025-after jmp
    test025: "Succeeded!\n" say
    test025-after:


    "\n[Test value stored in local variable.]\n" say
    "jz: " say
    0 test-value store
    test-value test026-success jz
    "Failed!\n" say test026-after jmp
    test026-success: "Succeeded!\n" say
    test026-after:

    "jnz: " say
    1 test-value store
    test-value test027-success jnz
    "Failed!\n" say test027-after jmp
    test027-success: "Succeeded!\n" say
    test027-after:

    "jlt: " say
    -1 test-value store
    test-value test028-success jlt
    "Failed!\n" say test028-after jmp
    test028-success: "Succeeded!\n" say
    test028-after:

    "jlte: " say
    -1 test-value store
    test-value test029-success jlte
    "Failed!\n" say test029-after jmp
    test029-success: "Succeeded!\n" say
    test029-after:

    "jgt: " say
    1 test-value store
    test-value test030-success jgt
    "Failed!\n" say test030-after jmp
    test030-success: "Succeeded!\n" say
    test030-after:

    "jgte: " say
    1 test-value store
    test-value test031-success jgte
    "Failed!\n" say test031-after jmp
    test031-success: "Succeeded!\n" say
    test031-after:


    continue-str show-options add-option
    dispatcher get-option
}


// ////////////////////////////////////////////////////////////////////////////
// Test math commands
// ////////////////////////////////////////////////////////////////////////////
function test-math(: counter) {
    asm

    "\n## Testing math opcodes\n" say
    " 5 + 5 = " say
    5 5 add say
    "\n" say

    "10 - 5 = " say
    10 5 sub say
    "\n" say

    " 5 * 5 = " say
    5 5 mult say
    "\n" say

    "40 / 5 = " say
    40 5 div say
    "\n" say

    "40 % 6 = " say
    40 6 mod say
    "\n" say

    "2 ^ 8 = " say
    2 8 pow say
    "\n" say

    "1 << 4 = " say
    1 4 left-shift say
    "\n" say

    "32 >> 4 = " say
    32 4 right-shift say
    "\n" say

    "86 & 90 = " say
    86 90 bitand say
    "\n" say

    "30 | 13 = " say
    30 13 bitor say

    "\n28 xor 23 = " say
    28 23 bitxor say

    "\n~348 = " say
    348 bitnot say

    "\nDec test:" say
    4 counter store
    dec-test-loop:
    " " say counter say
    counter dec counter store
    counter 0 cmp dec-test-loop jgte

    "\nInc test:" say
    0 counter store
    inc-test-loop:
    " " say counter say
    counter inc counter store
    counter 4 cmp inc-test-loop jlte

    continue-str show-options add-option
    dispatcher get-option
}


// ////////////////////////////////////////////////////////////////////////////
// Test object property commands
// ////////////////////////////////////////////////////////////////////////////
function test-object-props() {
    asm

    "\n## Testing object manipulation opcodes\n[testing get-prop]\n" say
    "first_obj.a-string: " say
    $a-string first_obj get-prop say
    " (should be \"Hello World!\")\n" say

    "first_obj.an_int: " say
    $an-int first_obj get-prop say
    " (should be 2)\n" say

    "second_obj.a-string: " say
    $a-string second_obj get-prop say
    " (should be 0)\n" say

    "\n[testing has-prop]\n" say
    "first_obj has property an_int? " say
    $an-int first_obj has-prop say
    " (should be 1)\n" say

    "second_obj has property a-string? " say
    $a-string second_obj has-prop say
    " (should be 0)\n" say

    "\n[testing set-prop]\n" say
    "setting second_obj.apple to \"Fred\" (new property) = " say
    "Fred" $apple second_obj set-prop
    $apple second_obj get-prop say

    "\n# testing property types:" say

    "\nfirst_obj.an-int (1): "      say $an-int      first_obj get-prop typeof say
    "\nfirst_obj.a-string (2): "    say $a-string    first_obj get-prop typeof say
    "\nfirst_obj.a-list (3): "      say $a-list      first_obj get-prop typeof say
    "\nfirst_obj.a-map (4): "       say $a-map       first_obj get-prop typeof say
    "\nfirst_obj.test-method (5): " say $test-method first_obj get-prop typeof say
    "\nfirst_obj.an-object (6): "   say $an-object   first_obj get-prop typeof say
    "\nfirst_obj.a-property (7): "  say $a-property  first_obj get-prop typeof say
    "\n" say

    continue-str show-options add-option
    dispatcher get-option
}


// ////////////////////////////////////////////////////////////////////////////
// Basic looping demo
// ////////////////////////////////////////////////////////////////////////////
function test-loop-demo(: counter the-value) {
    asm
// show a count up loop and calculate 2^10
    0 counter store
    1 the-value store
    loop-start:
    counter 1 add counter store
    2 the-value mult the-value store
    counter say
    " " say
    counter 10 cmp loop-start jlt
    "Loop finished!\n" say
    "Final result: " say
    the-value say
    "\n" say

    continue-str show-options add-option
    dispatcher get-option
}


// ////////////////////////////////////////////////////////////////////////////
// Test input commands
// ////////////////////////////////////////////////////////////////////////////
function test-inputs() {
    asm
    "This node serves as a test of the menu selection options. Other input options can be selected in the menu below, or you can return to the top level menu." say
    "Test key input"        test-getkey     add-option
    "No extra value"        receive-extra   add-option
    "Extra value 6"         receive-extra   6   add-option-ex
    "Extra value 73"        receive-extra   73  add-option-ex
    "Return to top menu"    show-options    add-option
    dispatcher get-option
}
function receive-extra(extra) {
    asm
    "Option extra value: " say extra say
    continue-str test-inputs add-option
    dispatcher get-option
}
function test-getkey() {
    asm
    "This will demonstrate and test the get-key input type." say
    "Try pressing a key." test-getkey-receive get-key
}
function test-getkey-receive(key) {
    asm
    "Resulting character code: " say key say ".\n" say
    continue-str test-inputs add-option
    dispatcher get-option
}


// ////////////////////////////////////////////////////////////////////////////
// Test value types
// ////////////////////////////////////////////////////////////////////////////
function test-values(: localvar unusedvar) {
    asm

    "int value: " say test-int typeof say
    test-int typeof Integer cmp int_bad jnz
    " good\n" say tst_string jmp
    int_bad: " wrong\n" say

    tst_string:
    "string value: " say test-str typeof say " " say
    test-str typeof String cmp string_bad jnz
    " good\n" say tst_list jmp
    string_bad: "wrong\n" say

    tst_list:
    "list value: " say test-list typeof say " " say
    test-list typeof List cmp list_bad jnz
    " good\n" say tst_map jmp
    list_bad: "wrong\n" say

    tst_map:
    "map value: " say test-map typeof say " " say
    test-map typeof Map cmp map_bad jnz
    " good\n" say tst_function jmp
    map_bad: "wrong\n" say

    tst_function:
    "function value: " say test-function typeof say " " say
    test-function typeof Function cmp function_bad jnz
    " good\n" say tst_function_2 jmp
    function_bad: "wrong\n" say
    tst_function_2:
    "value function aliasing:" say
    test-function test-function-name cmp tst_function_2_bad jnz
    " good\n" say tst_obj jmp
    tst_function_2_bad: " wrong\n" say

    tst_obj:
    "object value: " say test-object typeof say " " say
    test-object typeof Object cmp obj_bad jnz
    " good\n" say tst_obj_2 jmp
    obj_bad: "wrong\n" say
    tst_obj_2:
    "value object aliasing:" say
    test-object test-object-name cmp test_obj_2_bad jnz
    " good\n" say tst_prop jmp
    test_obj_2_bad: " wrong\n" say

    tst_prop:
    "property value: " say test-property typeof say " " say
    test-property typeof Property cmp prop_bad jnz
    " good\n" say tst_local jmp
    prop_bad: "wrong\n" say

    tst_local:
    "[setting local variable \"localvar\" to 57]\n" say
    57 localvar store
    "local variable value: (" say localvar say ") " say localvar typeof say " " say
    localvar typeof Integer cmp local_bad jnz
    " good\n" say tst_unused jmp
    local_bad: "wrong\n" say

    tst_unused:
    "unused local value: (" say unusedvar say ") " say
    unusedvar typeof say " " say
    unusedvar typeof None cmp unused_bad jnz
    " good\n" say tst_jump jmp
    unused_bad: "wrong\n" say

    tst_jump:
    "jump target value: " say tst_jump typeof say
    tst_jump typeof Label cmp label_bad jnz
    " good\n" say all_done jmp
    label_bad: "wrong\n" say

    all_done:
    continue-str show-options add-option
    dispatcher get-option
}

// ////////////////////////////////////////////////////////////////////////////
// Output command tests
// ////////////////////////////////////////////////////////////////////////////
function test-output() {
    asm

    "This text (and nearly all text in these tests) is output using the \"say\" command.\nSay integer value: " say
    6215 say
    "\n-1 using say-unsigned (should be 4294967295): " say
    -1 say-unsigned
    "\n65 using say-char (should be 'A'): " say
    65 say-char
    "\nSay UTF-8 Text: テキストの例\n" say

    "# Testing text formatting:\n" say
    "bold text: [b]Lorem ipsum dolor sit amet.[/b]\n" say
    "italic text: [i]Lorem ipsum dolor sit amet.[/i]\n" say
    "bold italic: [b][i]Lorem ipsum dolor sit amet.[/i][/b]\n" say
    "italic bold: [i][b]Lorem ipsum dolor sit amet.[/b][/i]\n" say

    continue-str show-options add-option
    dispatcher get-option
}

// ////////////////////////////////////////////////////////////////////////////
// Update info areas
// ////////////////////////////////////////////////////////////////////////////
function test-infoarea() {
    asm

    "The header, footer, and title regions should now be updated. (Unless you already ran this test since starting the program.)" say

    "Good day!"     InfobarLeft     set-info
    "5:00 am"       InfobarRight    set-info
    "Fred is Cool"  InfobarFooter   set-info
    "Updated Title" InfobarTitle    set-info
    continue-str show-options add-option
    dispatcher get-option
}

// ////////////////////////////////////////////////////////////////////////////
// Test RNG
// ////////////////////////////////////////////////////////////////////////////
function test-random(: counter) {
    asm

    "This will generate 100 random numbers between 50 and 60 below.\n" say

    100 counter store
    loop_start:
    counter loop_done jlte
    50 60 random say " " say
    counter 1 sub counter store
    loop_start jmp
    loop_done: "\n" say

    continue-str show-options add-option
    dispatcher get-option
}

// ////////////////////////////////////////////////////////////////////////////
// Test List Methods
// ////////////////////////////////////////////////////////////////////////////
function print-array(theArray : counter length) {
    asm

    "[b]Array contents:[/b]" say
    theArray get-size length store
    0 counter store
    array-dump-loop:
    " " say counter theArray get-item say
    counter inc counter store
    counter length cmp array-dump-loop jlt
    " (length: " say length say ")\n" say
}

function test-lists(: counter) {
    asm

    "Test list size (should be 3): " say
    test-list get-size say "\n" say
    test-list 1 print-array call

    "Adding new item 91 at end...\n" say
    91 99 test-list add-item "\n" say
    test-list 1 print-array call

    "Adding new item 4608 in first position...\n" say
    4608 0 test-list add-item "\n" say
    test-list 1 print-array call

    "Adding new item 44 after second item...\n" say
    44 2 test-list add-item "\n" say
    test-list 1 print-array call

    "New test list size (should be 6): " say
    test-list get-size say "\n" say

    "Deleting index #2...\n" say
    2 test-list del-item
    test-list 1 print-array call

    "Trying to get bad index -1: " say
    -1 test-list get-item say "\n" say

    "Trying to get bad index 99: " say
    99 test-list get-item say "\n" say

    "Updating index #2 to second_obj...\n" say
    second_obj 2 test-list set-item
    test-list 1 print-array call

    "\nSelecting 20 random items from test-list:" say
    0 counter store
    random-loop:
    " [" say test-list get-random say "]" say
    counter inc counter store
    20 counter cmp random-loop jgt

    continue-str show-options add-option
    dispatcher get-option
}

// ////////////////////////////////////////////////////////////////////////////
// Test Map Methods
// ////////////////////////////////////////////////////////////////////////////
function test-maps() {
    asm

    "Current item \"7\" (non-existant key): " say
    7 test-map get-item say
    "\n" say


    "Current item \"2\" (\"End\"): " say
    2 test-map get-item say
    "\n" say

    "Updating item \"2\"...\n" say
    "Apple" 2 test-map set-item

    "New item \"2\" (\"End\"): " say
    2 test-map get-item say
    "\n" say


    "Adding item \"item\"...\n" say
    "newkey" "item" test-map set-item

    "Item \"item\" value (\"newkey\"): " say
    "item" test-map get-item say
    "\n" say


    "Has key 2 (yes): " say
    2 test-map has-item say
    "\n" say

    "Deleting item \"2\"...\n" say
    2 test-map del-item
    "Current item \"2\" (\"End\"): " say
    2 test-map get-item say "\n" say

    "Has key 2 (no): " say
    2 test-map has-item say
    "\n" say


    "Has key 3 (yes): " say
    3 test-map has-item say
    "\n" say

    "Has key 88 (no): " say
    88 test-map has-item say
    "\n" say

    continue-str show-options add-option
    dispatcher get-option
}

// ////////////////////////////////////////////////////////////////////////////
// Test selection
// ////////////////////////////////////////////////////////////////////////////
function show-options() {
    asm

    "Welcome to the feature test demo!\nSelect one of the options displayed below by entering its associated number in order to run the tests. When that is complete, you will be returned to this screen." say

    "Loop Demo"                 test-loop-demo      add-option
    "Test Info Areas"           test-infoarea       add-option
    "Test Call"                 test-call           add-option
    "Test RNG"                  test-random         add-option
    "Test Compare"              test-compare        add-option
    "Test Jumps"                test-jumps          add-option
    "Test Math"                 test-math           add-option
    "Test List Methods"         test-lists          add-option
    "Test Map Methods"          test-maps           add-option
    "Test Object Properties"    test-object-props   add-option
    "Test Input Methods"        test-inputs         add-option
    "Test stack commands"       test-stack          add-option
    "Test value types"          test-values         add-option
    "Test output"               test-output         add-option
    dispatcher get-option
}


function dispatcher(option-func extra-value) {
    asm

    extra-value 1 option-func call
    0 return
}

function main() {
    asm

    "GTRPGE Test Suite" InfobarTitle set-info
    0 show-options call
}

value te "";
